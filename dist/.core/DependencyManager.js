const echoHandler=require("echo-handler"),AssetHandler=require("./handlers/AssetHandler.js"),AsyncHandler=require("./handlers/AsyncHandler.js"),MongooseHandler=require("./handlers/MongooseHandler.js");module.exports=function(e){const r=this,n=echoHandler.configure({factoryOverride:`${e.root}/.core/i18n/${e.i18n}.depManMessages.json`,logger:e.logger}),a=require(`${e.root}/api/Enums.js`),s=new MongooseHandler(e).fetch(),t=()=>{r.call.environment||Object.keys(e).forEach(n=>{r.call[n]=e[n]})},o=(e,n)=>{switch(e){case"Service":return new(l(e,n))(r.call);case"Validator":return l("Model",`validators/${n}`)(r.call);default:return s.models[n]||s.model(e,l("Model",n)(r.call))}},c=r=>{switch(r){case":async":return new AsyncHandler;case":echo":return echoHandler.configure(e);case":enums":return a;case":schema":return s.Schema.Types.create=((e,r)=>new s.Schema(e,r)),s.Schema.Types;default:return AssetHandler(r,e)}},l=(r,a,s)=>{try{return require(`${e.root}/api/${r.toLowerCase()}s/${a}`)}catch(e){n.throw("failed",a)}};this.call=(e=>{try{if(t(),"string"==typeof e){if(e.match(/^:/))return c(e);{let r=e.match(/[A-Z]{1}[a-z]+$/);if(r&&r.length)return o(r[0],e.replace(".","/"));n.throw("unsupported",e)}}else n.throw("invalidType",typeof e)}catch(e){n.throw("invalidDependency",e.message,e)}})};